#!/bin/bash

# ██████╗ ███████╗ █████╗ ██████╗ ███╗   ███╗███████╗
# ██╔══██╗██╔════╝██╔══██╗██╔══██╗████╗ ████║██╔════╝
# ██████╔╝█████╗  ███████║██║  ██║██╔████╔██║█████╗
# ██╔══██╗██╔══╝  ██╔══██║██║  ██║██║╚██╔╝██║██╔══╝
# ██║  ██║███████╗██║  ██║██████╔╝██║ ╚═╝ ██║███████╗
# ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚══════╝
#
# Author: wilberquito
# License: WTFPL
# Description:
# 	- Link config files to system.


DOTFILES_ROOT=$(pwd -P)
cd "$(dirname "$0")/.."

info () {
	printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
	printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
	printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
	printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
	echo ''
	exit
}

setup_gitconfig () {
	# Checks if the gitconfig symlink file exists,
	# if it does not, it creates one using a skeleton example

	if ! [ -f symlink/home/.gitconfig.symlink ]
	then
		info 'setup gitconfig'

		if ! [ -f examples/.gitconfig.symlink.example ]
		then
			fail 'gitconfig skeleton not found'
		fi

		user ' - What is your github author name?'
		read -e git_authorname
		user ' - What is your github author email?'
		read -e git_authoremail

		sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" examples/.gitconfig.symlink.example > symlink/home/.gitconfig.symlink

		success 'gitconfig'
	fi
}


setup_symlink() {
	reset
	setup_home_symlink
	reset
	echo ''
	setup_config_symlink
}


setup_home_symlink() {
	info 'installing home symbolic link'

	for src in $(find -H "$(pwd)/symlink/home/" -maxdepth 1 -name '*.symlink')
	do
		dst="$HOME/$(basename "${src%.*}")"
		echo $dst
		link_file "$src" "$dst"
	done
}


setup_config_symlink() {
	info 'installing .config symbolic link'

	for src in $(find -H "$(pwd)/symlink/config/" -maxdepth 1 -name '*.symlink')
	do
		echo $HOME
		dst="$HOME/.config/$(basename "${src%.*}")"
		link_file "$src" "$dst"
	done
}



link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      # Already linked to the same source
      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}


reset() {
	overwrite_all=false;
	backup_all=false;
	skip_all=false;
}


setup_gitconfig

setup_symlink

exit 0
